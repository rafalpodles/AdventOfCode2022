package day5

import (
	"bufio"
	"fmt"
	"os"
	"strconv"
	"strings"
)

func Solve() {
	file, err := os.Open("./data5.txt")
	checkError(err)
	defer func(file *os.File) {
		checkError(err)
	}(file)

	//[H]                 [Z]         [J]
	//[L]     [W] [B]     [G]         [R]
	//[R]     [G] [S]     [J] [H]     [Q]
	//[F]     [N] [T] [J] [P] [R]     [F]
	//[B]     [C] [M] [R] [Q] [F] [G] [P]
	//[C] [D] [F] [D] [D] [D] [T] [M] [G]
	//[J] [C] [J] [J] [C] [L] [Z] [V] [B]
	//[M] [Z] [H] [P] [N] [W] [P] [L] [C]
	//1   2   3   4   5   6   7   8   9
	rows := [9][64]int32{
		{'M', 'J', 'C', 'B', 'F', 'R', 'L', 'H', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*'},
		{'Z', 'C', 'D', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*'},
		{'H', 'J', 'F', 'C', 'N', 'G', 'W', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*'},
		{'P', 'J', 'D', 'M', 'T', 'S', 'B', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*'},
		{'N', 'C', 'D', 'R', 'J', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*'},
		{'W', 'L', 'D', 'Q', 'P', 'J', 'G', 'Z', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*'},
		{'P', 'Z', 'T', 'F', 'R', 'H', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*'},
		{'L', 'V', 'M', 'G', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*'},
		{'C', 'B', 'G', 'P', 'F', 'Q', 'R', 'J', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*'}}
	scanner := bufio.NewScanner(file)

	task1(*scanner, rows)
	fmt.Println()
	task2(*scanner, rows)

}

func task1(scanner bufio.Scanner, rows [9][64]int32) {
	for scanner.Scan() {
		s := scanner.Text()
		split := strings.Split(s, " ")
		moves, _ := strconv.Atoi(split[1])
		from, _ := strconv.Atoi(split[3])
		from--
		to, _ := strconv.Atoi(split[5])
		to--
		for i := 0; i < moves; i++ {
			letterToMove := rows[from][findLastFullIndex(rows[from])]
			rows[to][findFirstEmptyIndex(rows[to])] = letterToMove
			rows[from][findLastFullIndex(rows[from])] = '*'
		}
	}
	printLastRow(rows)
}

func task2(scanner bufio.Scanner, rows [9][64]int32) {
	for scanner.Scan() {
		s := scanner.Text()
		split := strings.Split(s, " ")
		moves, _ := strconv.Atoi(split[1])
		from, _ := strconv.Atoi(split[3])
		from--
		to, _ := strconv.Atoi(split[5])
		to--
		lfi := findLastFullIndex(rows[from])
		slice := rows[from][lfi-moves+1 : lfi+1]
		sliceFrom := rows[from]
		sliceTo := rows[to]
		for _, s := range slice {
			sliceTo[findFirstEmptyIndex(sliceTo)] = s
			sliceFrom[findLastFullIndex(sliceFrom)] = '*'
		}
		rows[from] = sliceFrom
		rows[to] = sliceTo
	}
	printLastRow(rows)
}

func printLastRow(arr [9][64]int32) {

	for i := 0; i < 9; i++ {
		el := arr[i][findLastFullIndex(arr[i])]
		fmt.Print(string(el))
	}

}

func findLastFullIndex(arr [64]int32) int {
	for i, s := range arr {
		if s == '*' {
			return i - 1
		}
	}
	return 0
}
func findFirstEmptyIndex(arr [64]int32) int {
	for i, s := range arr {
		if s == '*' {
			return i
		}
	}
	return 0
}

func checkError(err error) {
	if err != nil {
		fmt.Println(err)
		return
	}
}
